!-----------------------------------------------------------------------
    subroutine uservp(ix,iy,iz,eg) ! set variable properties

    return
    end subroutine uservp
!-----------------------------------------------------------------------
    subroutine userf(ix,iy,iz,eg) ! set acceleration term
    use nekuse, only : ffx, ffy, ffz, temp
    use kinds, only : DP
    implicit none

!     Note: this is an acceleration term, NOT a force!
!     Thus, ffx will subsequently be multiplied by rho(x,t).

    integer :: ix, iy, iz, eg
    common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta
    real(DP) :: rayleigh, atwood, amp0, delta
    integer :: kmax, kmin

    ffx = 0.0
    ffy = 0.0
    ffz = rayleigh*temp

    return
    end subroutine userf
!-----------------------------------------------------------------------
    subroutine userq(ix,iy,iz,eg) ! set source term

    return
    end subroutine userq
!-----------------------------------------------------------------------
    subroutine userq2(q) ! set source term

    return
    end subroutine userq2
!-----------------------------------------------------------------------
    subroutine userbc(ix,iy,iz,iside,ieg) ! set up boundary conditions
    use nekuse, only : ux, uy, uz, temp

    return
    end subroutine userbc
!-----------------------------------------------------------------------
    subroutine useric(ix,iy,iz,eg) ! set up initial conditions
!      use ifport, only : random_number, random_seed
    use kinds, only : DP
    use nekuse, only : x, y, z, ux, uy, uz, temp
    use tstep, only : pi
    implicit none

    common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta
    integer :: ix, iy, iz, eg
    real(DP) :: rayleigh, atwood, amp0, delta
    integer :: kmax, kmin

    real(DP) :: zz

    ux   = 0.0
    uy   = 0.0
    uz   = 0.0

    zz = 0.
    zz = zz + amp0/kmin*cos(kmin*pi*(x+y))*cos(kmin*pi*(x-y))
    zz = -(z + zz)/delta

    temp = atwood*erf(zz)

    return
    end subroutine useric
!-----------------------------------------------------------------------
    subroutine userchk()
    use kinds, only : DP
    use size_m, only : lx1, ly1, lz1, lelt
    use tstep, only : istep
    use input, only : param, ifxyo
    use parallel, only : nid
    use soln, only : vx, vy, vz, pr, t
    implicit none

    real(DP), external :: glmax, glmin
    real(DP) :: tmax, wmax

    if (param(69) < 1 .and. istep == 0) call outpost(vx,vy,vz,pr,t,'   ')
    ifxyo = .false.

    tmax = max(glmax(t, lx1*ly1*lz1*lelt), -glmin(t, lx1*ly1*lz1*lelt))
    if (nid == 0) write(*,*) "Maximum point-wise scalar", tmax
    wmax = max(glmax(vz, lx1*ly1*lz1*lelt), -glmin(vz, lx1*ly1*lz1*lelt))
    if (nid == 0) write(*,*) "Maximum vertical velocity", wmax


    return
    end subroutine userchk
!-----------------------------------------------------------------------
    subroutine usrdat()   ! This routine to modify element vertices

    return
    end subroutine usrdat
!-----------------------------------------------------------------------
    subroutine usrdat2()  ! This routine to modify mesh coordinates
     use kinds, only : DP
    implicit none

    common /myvalues/ rayleigh, atwood, kmax, kmin, amp0, delta
    real(DP) :: rayleigh, atwood, amp0, delta
    integer :: kmax, kmin


    atwood = 1._dp
    kmax = {kmax}
    kmin = {kmin}
    amp0 = {amp0}
    rayleigh = {g} * {atwood}
    delta = {delta}

    return
    end subroutine usrdat2
!-----------------------------------------------------------------------
    subroutine usrdat3()

    return
    end subroutine usrdat3
!-----------------------------------------------------------------------
